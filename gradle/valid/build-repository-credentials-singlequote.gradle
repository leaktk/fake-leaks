/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the protobuf auto generator
    id 'com.google.protobuf' version "0.8.18"

    // Eclipse Support
    id 'eclipse'

    // IntelliJ Support
    id 'idea'

    // Maven
    id 'maven-publish'
    id 'signing'
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = 'xyz.example'
version = '1.4.7'

sourceCompatibility = 17
targetCompatibility = 17

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'lib', include: ['*.jar'])

    implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.5.8'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.11'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'

    implementation group: 'org.jline', name: 'jline', version: '3.21.0'
    implementation group: 'org.jline', name: 'jline-terminal-jna', version: '3.21.0'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.10.0'

    implementation group: 'io.netty', name: 'netty-common', version: '4.1.79.Final'
    implementation group: 'io.netty', name: 'netty-handler', version: '4.1.79.Final'
    implementation group: 'io.netty', name: 'netty-transport-native-epoll', version: '4.1.79.Final'
    implementation group: 'io.netty', name: 'netty-transport-native-kqueue', version: '4.1.79.Final'

    protobuf files('proto/')

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j'
}

application {
    // Define the main class for the application
    getMainClass().set('emu.grasscutter.Grasscutter')
}

jar {
    exclude '*.proto'

    manifest {
        attributes 'Main-Class': 'emu.grasscutter.Grasscutter'
    }

    archiveBaseName = 'grasscutter'
    if (project.hasProperty('jarFilename')) {
        archiveFileName = "${jarFilename}.${archiveExtension}"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from('src/main/java') {
        include '*.xml'
    }

    destinationDirectory = file(".")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'fake-leak-example'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'fake-leak-example'
                description = 'Example'
                url = 'https://github.com/leaktk/fake-leaks/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'gitleaks'
                        name = 'gitleaks'
                        email = 'example@gitleaks.io'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (version.endsWith('-dev')) {
                println("Publishing to example-maven")
                url 'https://repo.example.com/releases'
                name 'example-maven'
                credentials {
                    username 'glUsername32'
                    password 'T&3x@19L!pQs'
                }
            } else {
                println("Publishing to sonatype")
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                name = 'sonatype'
                credentials(PasswordCredentials)
            }
        }
    }
}
